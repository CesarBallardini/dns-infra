---

# site.yml
#
# ansible-playbook -i vagrant-inventory provision/site.yml 

# ----------------------------------------------------------------
- hosts: powerdns

  roles:
    - { role: PowerDNS.pdns, become: true }
  vars:
    database_name: '/var/lib/powerdns/db.sqlite'
    pdns_config:
      master: true
      slave: false
      local-address: '192.168.44.10'
      # API Configuration
      api: yes
      api-key: "powerdns"
      # Embedded webserver
      webserver: yes
      webserver-address: "192.168.33.10"
      webserver-port: "8001"
      webserver-allow-from: "192.168.33.10"
    pdns_backends:
      gsqlite3:
        database: "{{ database_name }}"
        dnssec: yes
    pdns_sqlite_databases_locations:
      - "{{ database_name }}"

# ----------------------------------------------------------------
- hosts: nsedit

  pre_tasks:
    - name: instala snake oil certificates
      apt:
        name: ssl-cert
        state: present
      become: true

  roles:
    - { role: geerlingguy.nginx, become: true }
    - { role: geerlingguy.php-versions, become: true }
    - { role: geerlingguy.php, become: true }
  vars:
        php_version: '7.4'
        php_memory_limit: "512M"
        php_webserver_daemon: "nginx"

        nginx_user: "www-data"
        nginx_remove_default_vhost: true
        nginx_vhosts:
          - listen: "443 ssl http2"
            server_name: "nsedit.infra.ballardini.com.ar"
            #server_name_redirect: "www.example.com"
            root: "/var/www/nsedit.infra.ballardini.com.ar/nsedit"
            index: "index.php index.html index.htm"
            state: "present"
            error: "500 502 503 504  /50x.html"
            template: "{{ nginx_vhost_template }}"
            filename: "nsedit.infra.ballardini.com.ar.443.com.ar.conf"
            extra_parameters: |
              location / {
                  if ($request_uri ~ ^/(.*)\.html$) {
                      return 302 /$1;
                  }
              }
              location = /50x.html {
                  root   /usr/share/nginx/html;
              }
              location ~ \.php$ {
                  fastcgi_split_path_info ^(.+\.php)(/.+)$;
                  fastcgi_pass   unix:/var/run/php/php7.4-fpm.sock;
                  fastcgi_index  index.php;
                  fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
                  include        fastcgi_params;
              }
              ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;
              ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
              ssl_protocols       TLSv1.1 TLSv1.2;
              ssl_ciphers         HIGH:!aNULL:!MD5;
          - listen: "80"
            server_name: "nsedit.infra.ballardini.com.ar"
            return: "301 https://nsedit.infra.ballardini.com.ar$request_uri"
            filename: "nsedit.infra.ballardini.com.ar.80.com.ar.conf"


  tasks:

    - name: directorio para instalar nsedit
      file:
        dest: /var/www/nsedit.infra.ballardini.com.ar
        state: directory
        owner: vagrant
        group: www-data
      become: true

    - name: directorio para secretos de nsedit
      file:
        dest: /usr/local/etc/nsedit/
        state: directory
        owner: www-data
        group: www-data
      become: true

    - name: instala git
      apt:
        name: git
        state: present
      become: true

    - name: verifica que existe instalacion previa configurada
      stat:
        path: /var/www/nsedit.infra.ballardini.com.ar/nsedit/includes/config.inc.php
      become: true
      register: reg_nsedit_existe_config

    - name: Git checkout
      ansible.builtin.git:
        repo: 'https://github.com/tuxis-ie/nsedit.git'
        dest: /var/www/nsedit.infra.ballardini.com.ar/nsedit
        version: 'tags/v1.0'
      when: not reg_nsedit_existe_config.stat.exists

    - name: nsedit config file
      template:
        src: config.inc.php.j2
        dest: /var/www/nsedit.infra.ballardini.com.ar/nsedit/includes/config.inc.php
      become: true
      vars:
        powerdns_api_key: 'powerdns'
        powerdns_api_ip: '192.168.33.10'
        powerdns_api_port: '8001'
        powerdns_api_proto: 'http'
        nsedit_authdb: "/usr/local/etc/nsedit/pdns.users.sqlite3"


# ----------------------------------------------------------------
- hosts: powerdns

  tasks:

    - name: verifica si el dominio example.com esta creado
      shell: |
        pdnsutil list-zone example.com

      become: true
      ignore_errors: true
      changed_when: false
      register: reg_example_com


    - name: crea un dominio example.com y agrega algunas entradas
      shell: |
        pdnsutil create-zone example.com ns1.example.com
        pdnsutil add-record example.com '' MX '25 mail.example.com'
        pdnsutil add-record example.com. www A 192.168.88.1

      become: true
      when: reg_example_com.rc != 0

